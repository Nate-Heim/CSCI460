#include <stdio.h>      // Standard I/O library for printf, scanf, etc.
#include <stdlib.h>     // For malloc(), free(), exit(), etc.
#include <fcntl.h>      // For open(), O_RDWR, O_CREAT
#include <unistd.h>     // For read(), write(), lseek(), close()
#include <string.h>     // For strerror(), strlen(), strcspn()
#include <errno.h>      // For error handling (global `errno`)
#include <ctype.h>      // Needed for tolower() to handle uppercase input

//function for reading
void handle_read(int fd) {
    int bytes_to_read;
    char *buffer;

    printf("Enter the number of bytes you want to read: ");
    
    if (scanf("%d", &bytes_to_read) != 1) {
        printf("Invalid input.\n");
        return;
    }

    buffer = (char *)malloc(bytes_to_read + 1);
    if (!buffer) {
        printf("Memory allocation failed.\n");
        return;
    }

    // Reset file pointer to start before reading
    if (lseek(fd, 0, SEEK_SET) == -1) {
        printf("Error resetting file position: %s\n", strerror(errno));
        free(buffer);
        return;
    }

    // Read from file
    ssize_t bytes_read = read(fd, buffer, bytes_to_read);
    
    if (bytes_read < 0) { 
        printf("Error reading file: %s\n", strerror(errno));
    } else if (bytes_read == 0) { 
        printf("No data to read (file may be empty).\n");
    } else {
        buffer[bytes_read] = '\0'; 
        printf("Read data: %s\n\n", buffer);
    }

    free(buffer);
}


// Function to handle writing to the file


// Function to handle seeking within the file
void handle_seek(int fd) {
    int offset, whence;  // Variables for user input

    printf("Enter an offset value: ");
    if (scanf("%d", &offset) != 1) {  // Get offset value
        printf("Invalid offset.\n");
        return;
    }

    printf("Enter a value for whence (0 for SEEK_SET, 1 for SEEK_CUR, 2 for SEEK_END): ");
    if (scanf("%d", &whence) != 1 || (whence < 0 || whence > 2)) {  // Get whence value
        printf("Invalid whence value.\n");
        return;
    }

    // Move file pointer based on user input
    off_t new_pos = lseek(fd, offset, whence);
    if (new_pos == (off_t)-1) {  // If lseek fails, print error
        printf("Error seeking in file: %s\n", strerror(errno));
    } else {
        printf("New file position: %ld\n", (long)new_pos);
    }
}

// Main function to handle user input loop
int main(int argc, char *argv[]) {
    // Make sure the user provides a filename as an argument
    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    // Open file for reading and writing (O_RDWR), create if it doesn't exist (O_CREAT)
    int fd = open(argv[1], O_RDWR | O_CREAT, 0644);
    if (fd < 0) {  // If open fails, print error and exit
        printf("Error opening file '%s': %s\n", argv[1], strerror(errno));
        return 1;
    }

    printf("File '%s' opened successfully.\n", argv[1]);

    char option;  // Variable to store user input option
    while (1) {
        printf("Option (r for read, w for write, s for seek): ");
        
        // Read user input (single character)
        int read_status = scanf(" %c", &option);

        // If user presses CTRL+D (EOF), break loop and exit
        if (read_status == EOF) {
            printf("\nCTRL+D detected, exiting...\n");
            break;
        }

        option = tolower(option);  // âœ… Convert uppercase to lowercase to handle 'R', 'W', 'S'

        // Process user input
        switch (option) {
            case 'r':
                handle_read(fd);
                break;
            case 'w':
                handle_write(fd);
                break;
            case 's':
                handle_seek(fd);
                break;
            default:
                printf("Invalid option. Try again.\n");
        }
    }

    close(fd);  // Close file before exiting
    return 0;   // Return success
}

